// import { Sequelize } from "sequelize";
import { DataTypes, Model, Optional ,Association, HasManyGetAssociationsMixin,
  HasManyCountAssociationsMixin, HasManyCreateAssociationMixin} from "sequelize";
import sequelize from "../config/database";
import Expense from "./expenseM";
import Orders from "./ordersM";
import Password from "./passwordresetM";
import expenseReport from "./expensereportM";

//step 1: define interface
interface UserAttributes{
  id:number;
  name:string;
  email:string;
  password:string;
  isPremiumUser:boolean;
  total_expense:number ;
  total_income:number ;
  createdAt?:Date;
  updatedAt?:Date;
}

//step 2: define another interface for optional values
interface UserCreationAttributes extends Optional<UserAttributes,"id"|"isPremiumUser"| "total_expense"|"total_income">{}

// step 3: define class which extend model and types
class User extends Model<UserAttributes,UserCreationAttributes> implements UserAttributes {
    public id!:number;
    public name!:string;
    public email!:string;
    public password!:string;
    public isPremiumUser!:boolean ;
    public total_expense!:number ;
    public total_income!:number ;

    //timestamp
    public createdAt!: Date;
    public updatedAt!: Date;

    // Add the expensetb alias for the Expense association
    public expensetb?: Expense[];  // This is the alias you used in the query


     // Methods generated by associations
    public getExpensetb!: HasManyGetAssociationsMixin<Expense>; // Get all related expenses
  public countExpensetb!: HasManyCountAssociationsMixin; // Count related expenses
  public createExpensetb!: HasManyCreateAssociationMixin<Expense>; // Create a new related expense

  public getExpensereporttb!: HasManyGetAssociationsMixin<expenseReport>; // Get all related expense reports
  public createExpensereporttb!: HasManyCreateAssociationMixin<expenseReport>; // Create a new expense report

    
    // Add associations here
    public static associations: {
    expensetb: Association<User, Expense>;
    orders: Association<User, Orders>;
    passwordtd: Association<User, Password>;
    expensereporttb: Association<User, expenseReport>;
    };
  
   

}
User.init(
  {
    id: {
      type: DataTypes.INTEGER,
      allowNull: false,
      primaryKey: true,
      autoIncrement: true,
    },

    name: { type: DataTypes.STRING, allowNull: true },
    email: { type: DataTypes.STRING, unique: true },
    password: {
      type: DataTypes.STRING,
    },
    isPremiumUser :{
      type:DataTypes.BOOLEAN,
      defaultValue:false
    },
    total_expense:{
      type:DataTypes.INTEGER,
      defaultValue : 0
    },
    total_income:{
      type:DataTypes.INTEGER,allowNull:true,defaultValue : 0
    }
  },
  {
    freezeTableName: true,
    sequelize,
    modelName:'User'
  }
);

export default User;
